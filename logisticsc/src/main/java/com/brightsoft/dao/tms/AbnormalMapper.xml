<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.brightsoft.dao.tms.AbnormalMapper" >
  <resultMap id="BaseResultMap" type="com.brightsoft.model.Abnormal" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="way_bill_Number" property="wayBillNumber" jdbcType="VARCHAR" />
    <result column="abnormal_date" property="abnormalDate" jdbcType="TIMESTAMP" />
    <result column="found_person" property="foundPerson" jdbcType="VARCHAR" />
    <result column="abnormal_node" property="abnormalNode" jdbcType="VARCHAR" />
    <result column="abnormal_type" property="abnormalType" jdbcType="VARCHAR" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="cargo_diff_number" property="cargoDiffNumber" jdbcType="INTEGER" />
    <result column="cargo_damage_number" property="cargoDamageNumber" jdbcType="INTEGER" />
    <result column="duty_site" property="dutySite" jdbcType="VARCHAR" />
    <result column="operation_person" property="operationPerson" jdbcType="VARCHAR" />
    <result column="cargo_name" property="cargoName" jdbcType="VARCHAR"/>
    <result column="cargo_package" property="cargoPackage" jdbcType="VARCHAR"/>
    <result column="cargo_piece" property="cargoPiece" jdbcType="INTEGER"/>
    <result column="ab_img_path" property="abImgPath" jdbcType="INTEGER"/>
    <result column="abnormal_status" property="abnormalStatus" jdbcType="INTEGER"/>
    
    <result column="handle_date" property="handleDate" jdbcType="TIMESTAMP" />
    <result column="compensation_money" property="compensationMoney" jdbcType="DOUBLE" />
    <result column="customer_opinion" property="customerOpinion" jdbcType="VARCHAR" />
    <result column="reply_opinion" property="replyOpinion" jdbcType="VARCHAR" />
    <result column="handle_result" property="handleResult" jdbcType="VARCHAR" />
    <result column="prevention_measures" property="preventionMeasures" jdbcType="VARCHAR" />
    
   	<result column="order_number" property="orderNumber" jdbcType="VARCHAR" />
    <result column="start_outlets_name" property="startOutletsName" jdbcType="VARCHAR" />
    <result column="target_outlets_name" property="targetOutletsName" jdbcType="VARCHAR" />
    <result column="consignor" property="consignor" jdbcType="VARCHAR" />
    <result column="consignor_mobile" property="consignorMobile" jdbcType="VARCHAR" />
    <result column="consignee" property="consignee" jdbcType="VARCHAR" />
    <result column="consignee_mobile" property="consigneeMobile" jdbcType="VARCHAR"/>
    <result column="agency_fund" property="agencyFund" jdbcType="DOUBLE"/>
    <result column="advance_cost" property="advanceCost" jdbcType="DOUBLE"/>
    <result column="total" property="total" jdbcType="DOUBLE"/>
    <result column="pay_method" property="payMethod" jdbcType="INTEGER"/>
    <result column="way_bill_order_time" property="wayBillOrderTime" jdbcType="TIMESTAMP"/>

	<result column="money" property="money" jdbcType="DOUBLE"/>
  </resultMap>
  <sql id="Base_Column_List" >
    id, way_bill_number, abnormal_date, found_person, abnormal_node, abnormal_type, content, 
    cargo_diff_number, cargo_damage_number, duty_site, operation_person, cargo_name, cargo_package,
    cargo_piece,ab_img_path,abnormal_status
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
  	SELECT 
	a.*,
	w.order_number, w.start_outlets_name, w.target_outlets_name, w.consignor, w.consignor_mobile, w.consignee, w.consignee_mobile, w.way_bill_order_time, w.insurance_money money
	FROM tms_abnormal a LEFT JOIN tms_way_bill_order w ON a.way_bill_number = w.way_bill_number
 	where a.id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from tms_abnormal
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.brightsoft.model.Abnormal" >
    insert into tms_abnormal (id, way_bill_number, abnormal_date, 
      found_person, abnormal_node, abnormal_type, 
      content, cargo_diff_number, cargo_damage_number, 
      duty_site, operation_person, cargo_name, cargo_package, cargo_piece,
      ab_img_path,abnormal_status)
    values (#{id,jdbcType=BIGINT}, #{wayBillNumber,jdbcType=VARCHAR}, #{abnormalDate,jdbcType=TIMESTAMP}, 
      #{foundPerson,jdbcType=VARCHAR}, #{abnormalNode,jdbcType=VARCHAR}, #{abnormalType,jdbcType=VARCHAR}, 
      #{content,jdbcType=VARCHAR}, #{cargoDiffNumber,jdbcType=INTEGER}, #{cargoDamageNumber,jdbcType=INTEGER}, 
      #{dutySite,jdbcType=VARCHAR}, #{operationPerson,jdbcType=VARCHAR}, #{cargoName,jdbcType=VARCHAR},
      #{cargoPackage,jdbcType=VARCHAR},#{cargoPiece,jdbcType=VARCHAR},#{abImgPath,jdbcType=VARCHAR},
      #{abnormalStatus,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.brightsoft.model.Abnormal" >
    insert into tms_abnormal
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="way_bill_number != null" >
        way_bill_number,
      </if>
      <if test="abnormalDate != null" >
        abnormal_date,
      </if>
      <if test="foundPerson != null" >
        found_person,
      </if>
      <if test="abnormalNode != null" >
        abnormal_node,
      </if>
      <if test="abnormalType != null" >
        abnormal_type,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="cargoDiffNumber != null" >
        cargo_diff_number,
      </if>
      <if test="cargoDamageNumber != null" >
        cargo_damage_number,
      </if>
      <if test="dutySite != null" >
        duty_site,
      </if>
      <if test="operationPerson != null" >
        operation_person,
      </if>
      <if test="cargoName != null" >
        cargo_name,
      </if>
      <if test="cargoPackage != null" >
        cargo_package,
      </if>
      <if test="cargoPiece != null" >
        cargo_piece,
      </if>
      <if test="abImgStatus != null" >
        ab_img_status,
      </if>
      <if test="abnormalStatus != null" >
        abnormal_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="wayBillNumber != null" >
        #{wayBillNumber,jdbcType=VARCHAR},
      </if>
      <if test="abnormalDate != null" >
        #{abnormalDate,jdbcType=TIMESTAMP},
      </if>
      <if test="foundPerson != null" >
        #{foundPerson,jdbcType=VARCHAR},
      </if>
      <if test="abnormalNode != null" >
        #{abnormalNode,jdbcType=VARCHAR},
      </if>
      <if test="abnormalType != null" >
        #{abnormalType,jdbcType=VARCHAR},
      </if>
      <if test="content != null" >
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="cargoDiffNumber != null" >
        #{cargoDiffNumber,jdbcType=INTEGER},
      </if>
      <if test="cargoDamageNumber != null" >
        #{cargoDamageNumber,jdbcType=INTEGER},
      </if>
      <if test="dutySite != null" >
        #{dutySite,jdbcType=VARCHAR},
      </if>
      <if test="operationPerson != null" >
        #{operationPerson,jdbcType=VARCHAR},
      </if>
      <if test="cargoName != null" >
        #{cargoName,jdbcType=VARCHAR},
      </if>
      <if test="cargoPackage != null" >
        #{cargoPackage,jdbcType=VARCHAR},
      </if>
      <if test="cargoPiece != null" >
        #{cargoPiece,jdbcType=VARCHAR},
      </if>
      <if test="abImgPath != null" >
        #{abImgPath,jdbcType=VARCHAR},
      </if>
      <if test="abnormalStatus != null" >
        #{abnormalStatus,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.brightsoft.model.Abnormal" >
    update tms_abnormal
    <set >
      <if test="wayBillNumber != null" >
        way_bill_number = #{wayBillNumber,jdbcType=VARCHAR},
      </if>
      <if test="abnormalDate != null" >
        abnormal_date = #{abnormalDate,jdbcType=TIMESTAMP},
      </if>
      <if test="foundPerson != null" >
        found_person = #{foundPerson,jdbcType=VARCHAR},
      </if>
      <if test="abnormalNode != null" >
        abnormal_node = #{abnormalNode,jdbcType=VARCHAR},
      </if>
      <if test="abnormalType != null" >
        abnormal_type = #{abnormalType,jdbcType=VARCHAR},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="cargoDiffNumber != null" >
        cargo_diff_number = #{cargoDiffNumber,jdbcType=INTEGER},
      </if>
      <if test="cargoDamageNumber != null" >
        cargo_damage_number = #{cargoDamageNumber,jdbcType=INTEGER},
      </if>
      <if test="dutySite != null" >
        duty_site = #{dutySite,jdbcType=VARCHAR},
      </if>
      <if test="operationPerson != null" >
        operation_person = #{operationPerson,jdbcType=VARCHAR},
      </if>
      <if test="cargoName != null" >
        cargo_name = #{cargoName,jdbcType=VARCHAR},
      </if>
      <if test="cargoPackage != null" >
       	cargo_package = #{cargoPackage,jdbcType=VARCHAR},
      </if>
      <if test="cargoPiece != null" >
        cargo_piece = #{cargoPiece,jdbcType=VARCHAR},
      </if>
      <if test="abImgPath != null" >
        ab_img_path = #{abImgPath,jdbcType=VARCHAR},
      </if>
      <if test="abnormalStatus != null" >
        abnormal_status = #{abnormalStatus,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByWayBillNumberSelective" parameterType="com.brightsoft.model.Abnormal" >
    update tms_abnormal
    <set>
      <if test="abnormalDate != null" >
        abnormal_date = #{abnormalDate,jdbcType=TIMESTAMP},
      </if>
      <if test="foundPerson != null" >
        found_person = #{foundPerson,jdbcType=VARCHAR},
      </if>
      <if test="abnormalNode != null" >
        abnormal_node = #{abnormalNode,jdbcType=VARCHAR},
      </if>
      <if test="abnormalType != null" >
        abnormal_type = #{abnormalType,jdbcType=VARCHAR},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="cargoDiffNumber != null" >
        cargo_diff_number = #{cargoDiffNumber,jdbcType=INTEGER},
      </if>
      <if test="cargoDamageNumber != null" >
        cargo_damage_number = #{cargoDamageNumber,jdbcType=INTEGER},
      </if>
      <if test="dutySite != null" >
        duty_site = #{dutySite,jdbcType=VARCHAR},
      </if>
      <if test="operationPerson != null" >
        operation_person = #{operationPerson,jdbcType=VARCHAR},
      </if>
      <if test="cargoName != null" >
        cargo_name = #{cargoName,jdbcType=VARCHAR},
      </if>
      <if test="cargoPackage != null" >
       	cargo_package = #{cargoPackage,jdbcType=VARCHAR},
      </if>
      <if test="cargoPiece != null" >
        cargo_piece = #{cargoPiece,jdbcType=VARCHAR},
      </if>
      <if test="abImgPath != null" >
        ab_img_path = #{abImgPath,jdbcType=VARCHAR},
      </if>
      <if test="abnormalStatus != null" >
        abnormal_status = #{abnormalStatus,jdbcType=INTEGER},
      </if>
    </set>
    where way_bill_number = #{wayBillNumber,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.brightsoft.model.Abnormal" >
    update tms_abnormal
    set way_bill_number = #{wayBillNumber,jdbcType=VARCHAR},
      abnormal_date = #{abnormalDate,jdbcType=TIMESTAMP},
      found_person = #{foundPerson,jdbcType=VARCHAR},
      abnormal_node = #{abnormalNode,jdbcType=VARCHAR},
      abnormal_type = #{abnormalType,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      cargo_diff_number = #{cargoDiffNumber,jdbcType=INTEGER},
      cargo_damage_number = #{cargoDamageNumber,jdbcType=INTEGER},
      duty_site = #{dutySite,jdbcType=VARCHAR},
      operation_person = #{operationPerson,jdbcType=VARCHAR},
      cargo_name = #{cargoName,jdbcType=VARCHAR},
      cargo_package = #{cargoPackage,jdbcType=VARCHAR},
      cargo_piece = #{cargoPiece,jdbcType=VARCHAR},
      ab_img_path = #{abImgPath,jdbcType=VARCHAR},
      abnormal_status = #{abnormalStatus,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <!-- 查询异常运单
  <select id="selectByCondition" resultMap="BaseResultMap">
  	SELECT * FROM (
	select a.*,
	wbo.order_number, wbo.start_outlets_name, wbo.target_outlets_name, wbo.consignor, wbo.consignor_mobile, wbo.consignee, wbo.consignee_mobile, wbo.way_bill_order_time,
	wbo.agency_fund, wbo.advance_cost, wbo.total, wbo.pay_method, wbo.insurance_money money,
	ah.handle_date, ah.compensation_money,ah.customer_opinion, ah.reply_opinion,ah.handle_result,ah.prevention_measures    
	from tms_abnormal a inner join tms_way_bill_order wbo on a.way_bill_number = wbo.way_bill_number 
	left join tms_abnormal_handle ah on a.id = ah.abnormal_id where 1 = 1 
	<if test="searchParams.startOutlets!=null and searchParams.startOutlets!=''">
		and wbo.start_outlets = #{searchParams.startOutlets}
	</if>
	<if test="searchParams.endOutlets!=null and searchParams.endOutlets!=''">
		and wbo.target_outlets = #{searchParams.endOutlets}
	</if>
	<if test="searchParams.abnormalType!=null and searchParams.abnormalType!=''">
		and a.abnormal_type = #{searchParams.abnormalType}
	</if>
	<if test="searchParams.startTime!=null and searchParams.startTime!=''">
		and a.abnormal_date <![CDATA[>=]]> #{searchParams.startTime}
	</if>
	<if test="searchParams.endTime!=null and searchParams.endTime!=''">
		and a.abnormal_date <![CDATA[<=]]> #{searchParams.endTime}
	</if>
	<if test="searchParams.condition!=null and searchParams.condition!=''">
		and wbo.way_bill_number = #{searchParams.condition}
	</if>
	and (wbo.start_outlets = #{user.outletsId} or wbo.target_outlets = #{user.outletsId})
	union    
	select a.*,
	lo.order_number, lo.start_outlets_name, lo.target_outlets_name, lo.consignor, lo.consignor_mobile, lo.consignee, lo.consignee_mobile, lo.lading_order_time way_bill_order_time,
	lo.agency_fund, lo.advance_cost, lo.total, lo.pay_method, lo.insurance_money money, 
	ah.handle_date, ah.compensation_money,ah.customer_opinion, ah.reply_opinion,ah.handle_result,ah.prevention_measures 
	from tms_abnormal a inner join tms_lading_order lo on a.way_bill_number = lo.way_bill_number     
	left join tms_abnormal_handle ah on a.id = ah.abnormal_id where 1 = 1 
	<if test="searchParams.startOutlets!=null and searchParams.startOutlets!=''">
		and lo.start_outlets = #{searchParams.startOutlets}
	</if>
	<if test="searchParams.endOutlets!=null and searchParams.endOutlets!=''">
		and lo.target_outlets = #{searchParams.endOutlets}
	</if>
	<if test="searchParams.abnormalType!=null and searchParams.abnormalType!=''">
		and a.abnormal_type = #{searchParams.abnormalType}
	</if>
	<if test="searchParams.startTime!=null and searchParams.startTime!=''">
		and a.abnormal_date <![CDATA[>=]]> #{searchParams.startTime}
	</if>
	<if test="searchParams.endTime!=null and searchParams.endTime!=''">
		and a.abnormal_date <![CDATA[<=]]> #{searchParams.endTime}
	</if>
	<if test="searchParams.condition!=null and searchParams.condition!=''">
		and lo.way_bill_number = #{searchParams.condition}
	</if>
	and (lo.start_outlets = #{user.outletsId} or lo.target_outlets = #{user.outletsId}) ) t LIMIT #{page.start}, #{page.limit}
  </select>
   -->
   <select id="selectByCondition" resultMap="BaseResultMap">
  	SELECT * FROM (
	select a.*,
	wbo.order_number, wbo.start_outlets_name, wbo.target_outlets_name, wbo.consignor, wbo.consignor_mobile, wbo.consignee, wbo.consignee_mobile, wbo.way_bill_order_time,
	wbo.agency_fund, wbo.advance_cost, wbo.total, wbo.pay_method, wbo.insurance_money money,
	ah.handle_date, ah.compensation_money,ah.customer_opinion, ah.reply_opinion,ah.handle_result,ah.prevention_measures    
	from tms_abnormal a inner join tms_way_bill_order wbo on a.way_bill_number = wbo.way_bill_number 
	left join tms_abnormal_handle ah on a.id = ah.abnormal_id where 1 = 1 
	<if test="searchParams.startOutlets!=null and searchParams.startOutlets!=''">
		and wbo.start_outlets = #{searchParams.startOutlets}
	</if>
	<if test="searchParams.endOutlets!=null and searchParams.endOutlets!=''">
		and wbo.target_outlets = #{searchParams.endOutlets}
	</if>
	<if test="searchParams.abnormalType!=null and searchParams.abnormalType!=''">
		and a.abnormal_type = #{searchParams.abnormalType}
	</if>
	<if test="searchParams.startTime!=null and searchParams.startTime!=''">
		and a.abnormal_date <![CDATA[>=]]> #{searchParams.startTime}
	</if>
	<if test="searchParams.endTime!=null and searchParams.endTime!=''">
		and a.abnormal_date <![CDATA[<=]]> #{searchParams.endTime}
	</if>
	<if test="searchParams.condition!=null and searchParams.condition!=''">
		and wbo.way_bill_number = #{searchParams.condition}
	</if>
	<if test="searchParams.outletsIds!=null and searchParams.outletsIds!=''">
		and (lo.start_outlets in (#{searchParams.outletsIds}) or lo.target_outlets in (#{searchParams.outletsIds})) ) 
	</if>
	union    
	select a.*,
	lo.order_number, lo.start_outlets_name, lo.target_outlets_name, lo.consignor, lo.consignor_mobile, lo.consignee, lo.consignee_mobile, lo.lading_order_time way_bill_order_time,
	lo.agency_fund, lo.advance_cost, lo.total, lo.pay_method, lo.insurance_money money, 
	ah.handle_date, ah.compensation_money,ah.customer_opinion, ah.reply_opinion,ah.handle_result,ah.prevention_measures 
	from tms_abnormal a inner join tms_lading_order lo on a.way_bill_number = lo.way_bill_number     
	left join tms_abnormal_handle ah on a.id = ah.abnormal_id where 1 = 1 
	<if test="searchParams.startOutlets!=null and searchParams.startOutlets!=''">
		and lo.start_outlets = #{searchParams.startOutlets}
	</if>
	<if test="searchParams.endOutlets!=null and searchParams.endOutlets!=''">
		and lo.target_outlets = #{searchParams.endOutlets}
	</if>
	<if test="searchParams.abnormalType!=null and searchParams.abnormalType!=''">
		and a.abnormal_type = #{searchParams.abnormalType}
	</if>
	<if test="searchParams.startTime!=null and searchParams.startTime!=''">
		and a.abnormal_date <![CDATA[>=]]> #{searchParams.startTime}
	</if>
	<if test="searchParams.endTime!=null and searchParams.endTime!=''">
		and a.abnormal_date <![CDATA[<=]]> #{searchParams.endTime}
	</if>
	<if test="searchParams.condition!=null and searchParams.condition!=''">
		and lo.way_bill_number = #{searchParams.condition}
	</if>
	<if test="searchParams.outletsIds!=null and searchParams.outletsIds!=''">
		and (lo.start_outlets in (#{searchParams.outletsIds}) or lo.target_outlets in (#{searchParams.outletsIds})) ) 
	</if>
	t LIMIT #{page.start}, #{page.limit}
  </select>
  <!-- 获取查询的总记录数 
  <select id="countAbnormal" resultType="int">
  	SELECT count(1) FROM (
	select a.*,
	wbo.order_number, wbo.start_outlets_name, wbo.target_outlets_name, wbo.consignor, wbo.consignor_mobile, wbo.consignee, wbo.consignee_mobile, wbo.way_bill_order_time,
	ah.handle_date, ah.compensation_money,ah.customer_opinion, ah.reply_opinion,ah.handle_result,ah.prevention_measures    
	from tms_abnormal a inner join tms_way_bill_order wbo on a.way_bill_number = wbo.way_bill_number 
	left join tms_abnormal_handle ah on a.id = ah.abnormal_id where 1 = 1 
	<if test="searchParams.startOutlets!=null and searchParams.startOutlets!=''">
		and wbo.start_outlets = #{searchParams.startOutlets}
	</if>
	<if test="searchParams.endOutlets!=null and searchParams.endOutlets!=''">
		and wbo.target_outlets = #{searchParams.endOutlets}
	</if>
	<if test="searchParams.abnormalType!=null and searchParams.abnormalType!=''">
		and a.abnormal_type = #{searchParams.abnormalType}
	</if>
	<if test="searchParams.startTime!=null and searchParams.startTime!=''">
		and a.abnormal_date <![CDATA[>=]]> #{searchParams.startTime}
	</if>
	<if test="searchParams.endTime!=null and searchParams.endTime!=''">
		and a.abnormal_date <![CDATA[<=]]> #{searchParams.endTime}
	</if>
	<if test="searchParams.condition!=null and searchParams.condition!=''">
		and wbo.way_bill_number = #{searchParams.condition}
	</if>
	and (wbo.start_outlets = #{user.outletsId} or wbo.target_outlets = #{user.outletsId})
	union    
	select a.*,
	lo.order_number, lo.start_outlets_name, lo.target_outlets_name, lo.consignor, lo.consignor_mobile, lo.consignee, lo.consignee_mobile, lo.lading_order_time way_bill_order_time,
	ah.handle_date, ah.compensation_money,ah.customer_opinion, ah.reply_opinion,ah.handle_result,ah.prevention_measures 
	from tms_abnormal a inner join tms_lading_order lo on a.way_bill_number = lo.way_bill_number     
	left join tms_abnormal_handle ah on a.id = ah.abnormal_id where 1 = 1 
	<if test="searchParams.startOutlets!=null and searchParams.startOutlets!=''">
		and lo.start_outlets = #{searchParams.startOutlets}
	</if>
	<if test="searchParams.endOutlets!=null and searchParams.endOutlets!=''">
		and lo.target_outlets = #{searchParams.endOutlets}
	</if>
	<if test="searchParams.abnormalType!=null and searchParams.abnormalType!=''">
		and a.abnormal_type = #{searchParams.abnormalType}
	</if>
	<if test="searchParams.startTime!=null and searchParams.startTime!=''">
		and a.abnormal_date <![CDATA[>=]]> #{searchParams.startTime}
	</if>
	<if test="searchParams.endTime!=null and searchParams.endTime!=''">
		and a.abnormal_date <![CDATA[<=]]> #{searchParams.endTime}
	</if>
	<if test="searchParams.condition!=null and searchParams.condition!=''">
		and lo.way_bill_number = #{searchParams.condition}
	</if>
	and (lo.start_outlets = #{user.outletsId} or lo.target_outlets = #{user.outletsId}) ) t
  </select> 
  -->
  <select id="countAbnormal" resultType="int">
  	SELECT count(1) FROM (
	select a.*,
	wbo.order_number, wbo.start_outlets_name, wbo.target_outlets_name, wbo.consignor, wbo.consignor_mobile, wbo.consignee, wbo.consignee_mobile, wbo.way_bill_order_time,
	ah.handle_date, ah.compensation_money,ah.customer_opinion, ah.reply_opinion,ah.handle_result,ah.prevention_measures    
	from tms_abnormal a inner join tms_way_bill_order wbo on a.way_bill_number = wbo.way_bill_number 
	left join tms_abnormal_handle ah on a.id = ah.abnormal_id where 1 = 1 
	<if test="searchParams.startOutlets!=null and searchParams.startOutlets!=''">
		and wbo.start_outlets = #{searchParams.startOutlets}
	</if>
	<if test="searchParams.endOutlets!=null and searchParams.endOutlets!=''">
		and wbo.target_outlets = #{searchParams.endOutlets}
	</if>
	<if test="searchParams.abnormalType!=null and searchParams.abnormalType!=''">
		and a.abnormal_type = #{searchParams.abnormalType}
	</if>
	<if test="searchParams.startTime!=null and searchParams.startTime!=''">
		and a.abnormal_date <![CDATA[>=]]> #{searchParams.startTime}
	</if>
	<if test="searchParams.endTime!=null and searchParams.endTime!=''">
		and a.abnormal_date <![CDATA[<=]]> #{searchParams.endTime}
	</if>
	<if test="searchParams.condition!=null and searchParams.condition!=''">
		and wbo.way_bill_number = #{searchParams.condition}
	</if>
	<if test="searchParams.outletsIds!=null and searchParams.outletsIds!=''">
		and (lo.start_outlets in (#{searchParams.outletsIds}) or lo.target_outlets in (#{searchParams.outletsIds})) ) 
	</if>
	union    
	select a.*,
	lo.order_number, lo.start_outlets_name, lo.target_outlets_name, lo.consignor, lo.consignor_mobile, lo.consignee, lo.consignee_mobile, lo.lading_order_time way_bill_order_time,
	ah.handle_date, ah.compensation_money,ah.customer_opinion, ah.reply_opinion,ah.handle_result,ah.prevention_measures 
	from tms_abnormal a inner join tms_lading_order lo on a.way_bill_number = lo.way_bill_number     
	left join tms_abnormal_handle ah on a.id = ah.abnormal_id where 1 = 1 
	<if test="searchParams.startOutlets!=null and searchParams.startOutlets!=''">
		and lo.start_outlets = #{searchParams.startOutlets}
	</if>
	<if test="searchParams.endOutlets!=null and searchParams.endOutlets!=''">
		and lo.target_outlets = #{searchParams.endOutlets}
	</if>
	<if test="searchParams.abnormalType!=null and searchParams.abnormalType!=''">
		and a.abnormal_type = #{searchParams.abnormalType}
	</if>
	<if test="searchParams.startTime!=null and searchParams.startTime!=''">
		and a.abnormal_date <![CDATA[>=]]> #{searchParams.startTime}
	</if>
	<if test="searchParams.endTime!=null and searchParams.endTime!=''">
		and a.abnormal_date <![CDATA[<=]]> #{searchParams.endTime}
	</if>
	<if test="searchParams.condition!=null and searchParams.condition!=''">
		and lo.way_bill_number = #{searchParams.condition}
	</if>
	<if test="searchParams.outletsIds!=null and searchParams.outletsIds!=''">
		and (lo.start_outlets in (#{searchParams.outletsIds}) or lo.target_outlets in (#{searchParams.outletsIds})) ) 
	</if>
	 t
  </select> 
 </mapper>